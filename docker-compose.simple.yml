version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: appointments_db_simple
    restart: unless-stopped
    environment:
      POSTGRES_DB: appointments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5435:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Simple backend without build
  backend:
    image: node:18-alpine
    container_name: appointments_backend_simple
    restart: unless-stopped
    working_dir: /app
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: appointments
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: local-development-jwt-secret-key-for-testing-only-32-chars-minimum
      JWT_EXPIRES_IN: 24h
    volumes:
      - .:/app
    ports:
      - "3001:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    command: sh -c "apk add --no-cache curl && corepack enable && yarn install && yarn workspace backend run start:dev"

  # Frontend with proper build
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: appointments_frontend_simple
    restart: unless-stopped
    ports:
      - "8080:80"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
